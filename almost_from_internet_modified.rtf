{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red96\green126\blue3;\red255\green255\blue255;\red61\green73\blue78;
\red9\green74\blue76;\red199\green63\blue5;\red131\green148\blue149;\red17\green134\blue139;\red52\green62\blue66;
}
{\*\expandedcolortbl;;\cssrgb\c44706\c55686\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c30588\c35686\c38039;
\cssrgb\c0\c36078\c37255;\cssrgb\c82745\c32941\c0;\cssrgb\c58431\c64706\c65098;\cssrgb\c0\c59216\c61569;\cssrgb\c26275\c30980\c32941;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <Wire.h>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <PWM.h>\cf4 \strokec4  \cb1 \
\
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 MPU6050\cf4 \strokec4        0x\cf5 \strokec5 68\cf7 \strokec7          // Device address\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 ACCEL_CONFIG\cf4 \strokec4   0x\cf5 \strokec5 1C\cf7 \strokec7          // Accelerometer configuration address\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 GYRO_CONFIG\cf4 \strokec4    0x\cf5 \strokec5 1B\cf7 \strokec7          // Gyro configuration address\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 PWR_MGMT_1\cf4 \strokec4     0x\cf5 \strokec5 6B\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 PWR_MGMT_2\cf4 \strokec4     0x\cf5 \strokec5 6C\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 BRAKE\cf4 \strokec4          \cf5 \strokec5 8\cf4 \strokec4  \cb1 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 PWM\cf4 \strokec4            \cf5 \strokec5 9\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 DIRECTION\cf4 \strokec4      \cf5 \strokec5 4\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 BUZZER\cf4 \strokec4         \cf5 \strokec5 12\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 VBAT\cf4 \strokec4           A7\cb1 \
\
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 uint16_t\cf4 \strokec4  PWM_FREQUENCY = \cf5 \strokec5 20000\cf4 \strokec4 ;\cf7 \strokec7                  // The motor driver can handle a PWM frequency up to 20kHz\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf8 \strokec8 uint16_t\cf4 \strokec4  PWMVALUE = F_CPU / PWM_FREQUENCY / \cf5 \strokec5 2\cf4 \strokec4 ;\cf7 \strokec7   // The frequency is given by F_CPU/(2*N*ICR) - where N is the prescaler, prescaling is used so the frequency is given by F_CPU/(2*ICR) - ICR = F_CPU/PWM_FREQUENCY/2\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 float\cf4 \strokec4  X1 = \cf5 \strokec5 20\cf4 \strokec4 ; \cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  X2 = \cf5 \strokec5 800\cf4 \strokec4 ;   \cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  X3 = \cf5 \strokec5 0.01\cf4 \strokec4 ;  \cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  loop_time = \cf5 \strokec5 10\cf4 \strokec4 ;  \cb1 \
\
\cf8 \cb3 \strokec8 int\cf4 \strokec4  pwm_s = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cb3 byte dir;\cb1 \
\cf8 \cb3 \strokec8 int32_t\cf4 \strokec4  motor_speed; \cb1 \
\cf8 \cb3 \strokec8 uint32_t\cf4 \strokec4  timer;\cb1 \
\cf8 \cb3 \strokec8 long\cf4 \strokec4  currentT, previousT_1, previousT_2 = \cf5 \strokec5 0\cf4 \strokec4 ; \cb1 \
\cf8 \cb3 \strokec8 int16_t\cf4 \strokec4  AcX, AcY, AcZ, GyZ, gyroZ;\cb1 \
\
\cf7 \cb3 \strokec7 //Sensor output scaling\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 accSens\cf4 \strokec4  \cf5 \strokec5 0\cf7 \strokec7              // 0 = 2g, 1 = 4g, 2 = 8g, 3 = 16g\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 gyroSens\cf4 \strokec4  \cf5 \strokec5 1\cf7 \strokec7             // 0 = 250rad/s, 1 = 500rad/s, 2 1000rad/s, 3 = 2000rad/s\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #define\cf4 \strokec4  \cf6 \strokec6 Gyro_amount\cf4 \strokec4  \cf5 \strokec5 0.996\cf7 \strokec7      // percent of gyro in complementary filter\cf4 \cb1 \strokec4 \
\
\cf7 \cb3 \strokec7 //IMU offset values\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 int16_t\cf4 \strokec4   AcX_offset = -\cf5 \strokec5 750\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 int16_t\cf4 \strokec4   AcY_offset = \cf5 \strokec5 360\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 int16_t\cf4 \strokec4   AcZ_offset = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 int16_t\cf4 \strokec4   GyZ_offset = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cf8 \cb3 \strokec8 int32_t\cf4 \strokec4   GyZ_offset_sum = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\
\cf8 \cb3 \strokec8 float\cf4 \strokec4  alpha = \cf5 \strokec5 0.40\cf4 \strokec4 ; \cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  gyroZfilt;\cb1 \
\
\cf8 \cb3 \strokec8 float\cf4 \strokec4  robot_angle;\cb1 \
\cf8 \cb3 \strokec8 float\cf4 \strokec4  Acc_angle;\cb1 \
\
\cf8 \cb3 \strokec8 bool\cf4 \strokec4  vertical = \cf5 \strokec5 false\cf4 \strokec4 ;  \cb1 \
\
\cf8 \cb3 \strokec8 uint8_t\cf4 \strokec4  \cf6 \strokec6 i2cData\cf4 \strokec4 [\cf5 \strokec5 14\cf4 \strokec4 ];\cf7 \strokec7  // Buffer for I2C data\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 setup\cf9 \strokec9 ()\cf4 \strokec4  \cf9 \strokec9 \{\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 delay\cf9 \strokec9 (\cf5 \strokec5 1000\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 angle_setup\cf9 \strokec9 ()\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 begin\cf9 \strokec9 (\cf5 \strokec5 115200\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\
\cf7 \cb3 \strokec7   // Set PWM frequency to 20kHz - see the datasheet http://www.atmel.com/Images/doc8272.pdf page 128-135 \cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   // Set up PWM, Phase and Frequency Correct on pin 9 (OC1A) & pin 10 (OC1B) with ICR1 as TOP using Timer1\cf4 \cb1 \strokec4 \
\cb3   TCCR1B = \cf9 \strokec9 (\cf5 \strokec5 1\cf4 \strokec4  << WGM13\cf9 \strokec9 )\cf4 \strokec4  | \cf9 \strokec9 (\cf5 \strokec5 1\cf4 \strokec4  << CS10\cf9 \strokec9 )\cf4 \strokec4 ;\cf7 \strokec7   // Set PWM Phase and Frequency Correct with ICR1 as TOP and no prescaling\cf4 \cb1 \strokec4 \
\cb3   ICR1 = PWMVALUE;\cf7 \strokec7                       // ICR1 is the TOP value - this is set so the frequency is equal to 20kHz\cf4 \cb1 \strokec4 \
\
\cf7 \cb3 \strokec7   // Clear OC1A/OC1B on compare match when up-counting - Set OC1A/OC1B on compare match when downcounting\cf4 \cb1 \strokec4 \
\cb3   TCCR1A = \cf9 \strokec9 (\cf5 \strokec5 1\cf4 \strokec4  << COM1A1\cf9 \strokec9 )\cf4 \strokec4  | \cf9 \strokec9 (\cf5 \strokec5 1\cf4 \strokec4  << COM1B1\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 setPWM\cf9 \strokec9 (\cf5 \strokec5 400\cf9 \strokec9 )\cf4 \strokec4 ; \cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf9 \strokec9 (\cf5 \strokec5 "PWM: "\cf9 \strokec9 )\cf4 \strokec4 ; \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf9 \strokec9 (\cf4 \strokec4 PWMVALUE\cf9 \strokec9 )\cf4 \strokec4 ; \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 print\cf9 \strokec9 (\cf5 \strokec5 "CPU_FREQ: "\cf9 \strokec9 )\cf4 \strokec4 ; \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf9 \strokec9 (\cf4 \strokec4 F_CPU\cf9 \strokec9 )\cf4 \strokec4 ; \cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 pinMode\cf9 \strokec9 (\cf4 \strokec4 PWM, OUTPUT\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 pinMode\cf9 \strokec9 (\cf4 \strokec4 BRAKE, OUTPUT\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 pinMode\cf9 \strokec9 (\cf4 \strokec4 DIRECTION, OUTPUT\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 Motor_control\cf9 \strokec9 (\cf5 \strokec5 400\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 void\cf4 \strokec4  \cf6 \strokec6 loop\cf9 \strokec9 ()\cf4 \strokec4  \cf9 \strokec9 \{\cf4 \cb1 \strokec4 \
\cb3   currentT = \cf6 \strokec6 millis\cf9 \strokec9 ()\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  \cf9 \strokec9 (\cf4 \strokec4 currentT - previousT_1 >= loop_time\cf9 \strokec9 )\cf4 \strokec4  \cf9 \strokec9 \{\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 Tuning\cf9 \strokec9 ()\cf4 \strokec4 ; \cb1 \
\cb3     \cf6 \strokec6 angle_calc\cf9 \strokec9 ()\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf9 \strokec9 (\cf4 \strokec4 vertical\cf9 \strokec9 )\cf4 \strokec4  \cf9 \strokec9 \{\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 digitalWrite\cf9 \strokec9 (\cf4 \strokec4 BRAKE, HIGH\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3       gyroZ = GyZ / \cf5 \strokec5 131.0\cf4 \strokec4 ;\cf7 \strokec7  // Convert to deg/s\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       gyroZfilt = alpha * gyroZ + \cf9 \strokec9 (\cf5 \strokec5 1\cf4 \strokec4  - alpha\cf9 \strokec9 )\cf4 \strokec4  * gyroZfilt;\cb1 \
\cb3       pwm_s = -\cf6 \strokec6 constrain\cf9 \strokec9 (\cf4 \strokec4 X1 * robot_angle + X2 * gyroZfilt + X3 * -motor_speed, -\cf5 \strokec5 255\cf4 \strokec4 , \cf5 \strokec5 255\cf9 \strokec9 )\cf4 \strokec4 ; \cb1 \
\cb3       \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf9 \strokec9 (\cf4 \strokec4 pwm_s\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\
\cb3       \cf6 \strokec6 Motor_control\cf9 \strokec9 (\cf4 \strokec4 pwm_s\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3       motor_speed += pwm_s;\cb1 \
\cb3       \cb1 \
\cb3       previousT_1 = currentT;\cb1 \
\cb3     \cf9 \strokec9 \}\cf4 \strokec4  \cf2 \strokec2 else\cf4 \strokec4  \cf9 \strokec9 \{\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 Motor_control\cf9 \strokec9 (\cf5 \strokec5 1\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3       motor_speed = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 Serial\cf4 \strokec4 .\cf6 \strokec6 println\cf9 \strokec9 (\cf5 \strokec5 "Not vertical"\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 digitalWrite\cf9 \strokec9 (\cf4 \strokec4 BRAKE, LOW\cf9 \strokec9 )\cf4 \strokec4 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf4 \cb1 \strokec4 \
\cb3   \cf9 \strokec9 \}\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 \}\cf4 \cb1 \strokec4 \
}